{"name":"Easy-sketch.js","tagline":"Another free drawing JavaScript library for HTML5 canvas.","body":"easy-sketch.js\r\n===================\r\n\r\neasy-sketch.js allows you to do a free drawing on the canvas without having to dig into the HTML 5 canvas API.\r\n\r\nA demo can be found here: http://brian.hopto.org/easy-sketch.js/demo.html\r\n\r\n\r\nDependencies\r\n-------------------\r\n- HTML 5\r\n- jQuery\r\n\r\n\r\nUsage\r\n-------------------\r\n\r\nTo create the class all you need to do is\r\n\r\n`var sketcher = new EasySketch.Sketch(\"#drawing-canvas\", options);`\r\n\r\n- the first parameter can be either a selector (class selector is not supported), element ID, jQuery object, JS object;\r\n- the second parameter is optional and may be an object containing 2 properties: color, width; these parameters can also be set using the setOptions() method;\r\n\r\n\r\n### Eraser\r\n\r\n\r\nBy default, after you create the sketch object you are able to draw on the canvas. To enable the eraser (or disable if for that matter) you can call the enableEraser() method with either the value true or false to enable or disable the eraser.\r\n\r\n`sketcher.enableEraser(true); // Eraser enabled / Pencil disabled`\r\n`sketcher.enableEraser(false); // Pencil enabled / Eraser disabled`\r\n\r\n\r\n### Pencil / eraser options\r\n\r\nFor adjusting the width, color (the color can only be changed for the pencil) and opacity ( *alpha* option )\r\nyou can use the setOptions() method like so:\r\n\r\n`sketcher.setOptions({width: 10, color: \"#000\", alpha: 0.5});`\r\n\r\nOr if you need to set them separately:\r\n\r\n`sketcher.setOptions({width: 10});`\r\n`sketcher.setOptions({color: \"#000\"});`\r\n`sketcher.setOptions({alpha: 0.5});`\r\n\r\nThe *alpha* option can take any value from 0 to 1.\r\n\r\nTo get an option you can call the getOption() method with the option name you desire. By default it will return null if it does not\r\nfind it, but that can be changed using the second parameter:\r\n\r\n`sketcher.getOption(\"color\");`\r\n\r\nor with the default changed\r\n\r\n`sketcher.getOption(\"some option\", \"value to return if option is not found\");`\r\n\r\n**Note:** If you want to draw lines with opacity, then I recommend you activate the **doubleBuffering** option which adds\r\nan extra layer that is used to buffer the line until you release the mouse click:\r\n\r\n`sketcher.setOptions({doubleBuffering: true});`\r\n\r\n### Drawing without user input\r\n\r\nThe object also comes with it's own event manager that allows you to trigger the 3 main events (draw start, draw, draw stop) without the user's input. To trigger the events you can do something like this:\r\n\r\n`sketcher.getEventManager().trigger(EasySketch.Sketch.START_PAINTING_EVENT, [{x: 10, y: 10}]);`\r\n`sketcher.getEventManager().trigger(EasySketch.Sketch.PAINT_EVENT, [{x: 10, y: 10}]);`\r\n`sketcher.getEventManager().trigger(EasySketch.Sketch.STOP_PAINTING_EVENT);`\r\n\r\nAs you can see the first 2 triggered events have a second parameter which is an array with a single element. The element is used to tell the sketcher where to start the drawing and where to paint the next point.\r\n\r\n### Events triggered by the class\r\n\r\nWhen the painting starts the *EasySketch.Sketch.NOTIFY_START_EVENT* event is triggered. The event is fired 1 parameter: an object containing the mouse position (x & y)\r\n\r\nAfter the painting has started and the user moves the pointer, the *EasySketch.Sketch.NOTIFY_PAINT_EVENT* event is triggered. The event is fired 1 parameter: an object containing the mouse position (x & y)\r\n\r\nWhen the user releases the mouse button the *EasySketch.Sketch.NOTIFY_STOP_EVENT* event is triggered. The event has no parameters.\r\n\r\n### Setting a custom object to bind to\r\n\r\nIn case you need a custom object to bind the events on, you can pass it to the constructor in the options:\r\n\r\n`var sketcher = new EasySketch.Sketch(\"#someId\", {bindingObject: $(\"#customElement\")});`\r\n\r\n**This option CANNOT be set after the creation of the object because the method that attaches the listeners is called in the constructor.**\r\n\r\n### Manual binding\r\n\r\nLet's say that for some reason you want to attach the listeners on the object later and not when the object is created. You can\r\nswitch to manual binding by setting the option **autoBind** to false when creating the object:\r\n\r\n`var sketcher = new EasySketch.Sketch(\"#someId\", {autoBind: false});`\r\n\r\n### Detaching the listeners\r\n\r\nBy default, when the object is created, a series of listeners are attached on the canvas or the object that was provided for\r\nbinding. You can remove those listeners by calling the detachListeners() method:\r\n\r\n`sketcher.detachListeners();`\r\n\r\n### Clearing the canvas\r\n\r\nTo clear the canvas all you need to do is call the *clear()* method:\r\n\r\n`sketcher.clear();`\r\n","google":"UA-48060390-1","note":"Don't delete this file! It's used internally to help with page regeneration."}