/**
 * easy-sketch.js
 *
 * @link https://github.com/brian978/easy-sketch.js
 * @copyright Copyright (c) 2014
 * @license Creative Commons Attribution-ShareAlike 3.0
 */

define('EasySketch/EasySketch',[],function () {
    function EasySketch() {

    }

    return EasySketch;
});

/**
 * easy-sketch.js
 *
 * @link https://github.com/brian978/easy-sketch.js
 * @copyright Copyright (c) 2014
 * @license Creative Commons Attribution-ShareAlike 3.0
 */

define('EasySketch/Event',["./EasySketch"], function (EasySketch) {

    /**
     *
     * @param {String} name
     * @param {Object} target
     * @param {Object} params
     * @constructor
     */
    EasySketch.Event = function (name, target, params) {
        /**
         *
         * @type {String}
         * @protected
         */
        this.name = name;

        /**
         *
         * @type {Object}
         * @protected
         */
        this.target = target;

        /**
         *
         * @type {Object}
         * @protected
         */
        this.params = params;

        /**
         *
         * @type {boolean}
         * @private
         */
        this._propagationStopped = false;
    };

    EasySketch.Event.prototype = {
        /**
         *
         * @returns {String}
         */
        getName: function () {
            return this.name;
        },

        /**
         *
         * @returns {Object}
         */
        getTarget: function () {
            return this.target;
        },

        /**
         *
         * @param {String|Number} name
         * @param {Object|String=null} defaultValue
         * @returns {Object|String|null}
         */
        getParam: function (name, defaultValue) {
            defaultValue = defaultValue || null;
            if(this.params.hasOwnProperty(name)) {
                return this.params[name];
            }

            return defaultValue;
        },

        /**
         *
         * @returns {Object}
         */
        getParams: function () {
            return this.params;
        },

        /**
         *
         * @returns {EasySketch.Event}
         */
        stopPropagation: function()
        {
            this._propagationStopped = true;

            return this;
        },

        /**
         *
         * @returns {boolean}
         */
        isPropagationStopped: function()
        {
            return this._propagationStopped;
        }
    };

    return EasySketch.Event;
});

/**
 * easy-sketch.js
 *
 * @link https://github.com/brian978/easy-sketch.js
 * @copyright Copyright (c) 2014
 * @license Creative Commons Attribution-ShareAlike 3.0
 */

define('EasySketch/EventManager',["./EasySketch", "./Event"], function (EasySketch) {

    /**
     *
     * @constructor
     */
    EasySketch.EventManager = function () {
        /**
         *
         * @type {Array}
         * @protected
         */
        this.events = {};
    };

    EasySketch.EventManager.prototype = {

        /**
         *
         * @param {String|Array} event
         * @returns {Array}
         * @private
         */
        _prepareEvent: function (event) {
            if (typeof event == "string") {
                if (event.indexOf(" ") !== -1) {
                    event = event.split(" ");
                } else {
                    event = [event];
                }
            }

            return event;
        },

        /**
         * Alias for attach()
         *
         * @param {String|Array} event
         * @param {Function} callback
         * @returns {EasySketch.EventManager}
         */
        on: function (event, callback) {
            return this.attach(event, callback);
        },

        /**
         *
         * @param {String|Array} event
         * @param {Function} callback
         * @returns {EasySketch.EventManager}
         */
        attach: function (event, callback) {
            var evt;
            var events = this._prepareEvent(event);
            for (var key in events) {
                if (events.hasOwnProperty(key)) {
                    evt = events[key];
                    if (this.events.hasOwnProperty(evt) === false) {
                        this.events[evt] = [];
                    }

                    this.events[evt].push(callback);
                }
            }

            return this;
        },

        /**
         * Alias for detach()
         *
         * @param {String|Array} event
         * @param {Function} callback
         * @returns {EasySketch.EventManager}
         */
        off: function (event, callback) {
            return this.detach(event, callback);
        },

        /**
         *
         * @param {String|Array} event
         * @param {Function} callback
         * @returns {EasySketch.EventManager}
         */
        detach: function (event, callback) {
            var evt;
            var events = this._prepareEvent(event);
            for (var key in events) {
                if (events.hasOwnProperty(key)) {
                    evt = events[key];
                    if (this.events.hasOwnProperty(evt)) {
                        for (var evtKey in this.events[evt]) {
                            if (this.events[evt].hasOwnProperty(evtKey) && this.events[evt][evtKey] === callback) {
                                this.events[evt][evtKey] = null;
                                delete this.events[evt][evtKey];
                            }
                        }
                    }
                }
            }

            return this;
        },

        /**
         *
         * @param {String} event
         * @param {Object} target
         * @param {Object} params
         * @returns {EasySketch.Event|null}
         */
        trigger: function (event, target, params) {
            var eventObject = null;
            if (this.events.hasOwnProperty(event)) {
                eventObject = new EasySketch.Event(event, target, params);
                for (var key in this.events[event]) {
                    if (this.events[event].hasOwnProperty(key)) {
                        this.events[event][key].call(null, eventObject);
                    }
                }

            }

            return eventObject;
        }
    };

    return EasySketch.EventManager;
});

/**
 * easy-sketch.js
 *
 * @link https://github.com/brian978/easy-sketch.js
 * @copyright Copyright (c) 2014
 * @license Creative Commons Attribution-ShareAlike 3.0
 */
define('EasySketch/Util',["./EasySketch"], function (EasySketch) {

    EasySketch.Util = {
        /**
         *
         * @param {jQuery} object
         * @returns {String}
         */
        getScalePropertyName: function (object) {
            var property = "";
            var canvasStyle = object[0].style;

            // Looking for the non-prefixed property first since it's easier
            if ("transform" in canvasStyle) {
                property = "transform";
            } else {
                // Determining the property to use
                var prefixes = ["-moz", "-webkit", "-o", "-ms"];
                var propertyName = "";
                for (var i = 0; i < prefixes.length; i++) {
                    propertyName = prefixes[i] + "-transform";
                    if (propertyName in canvasStyle) {
                        property = propertyName;
                        break;
                    }
                }
            }

            return property;
        },

        /**
         *
         * @param {jQuery} object
         * @returns {{x: number, y: number}}
         */
        getScale: function (object) {
            var property = this.getScalePropertyName(object);
            var scale = {
                x: 1,
                y: 1
            };

            if (property !== null) {
                var matrix = String(object.css(property));
                if (matrix != "none") {
                    var regex = new RegExp("([0-9.-]+)", "g");
                    var matches = matrix.match(regex);
                    scale.x = parseFloat(matches[0]);
                    scale.y = parseFloat(matches[3]);
                }
            }

            return scale;
        },

        /**
         * Extends a child object from a parent
         *
         * @param {Object} parent
         * @param {Object} child
         */
        extend: function (parent, child) {
            // Inheriting the methods
            for (var method in parent.prototype) {
                if (parent.prototype.hasOwnProperty(method) && typeof parent.prototype[method] === "function") {
                    // We must not overwrite the methods in the child if they already exist
                    if(!child.prototype.hasOwnProperty(method)) {
                        child.prototype[method] = parent.prototype[method];
                    }
                }
            }

            // Inheriting the properties
            for (var property in parent) {
                if (parent.hasOwnProperty(property) && typeof parent.prototype[method] !== "function") {
                    child[property] = parent[property];
                }
            }
        }
    };

    return EasySketch.Util;
});

/**
 * easy-sketch.js
 *
 * @link https://github.com/brian978/easy-sketch.js
 * @copyright Copyright (c) 2014
 * @license Creative Commons Attribution-ShareAlike 3.0
 */

define('EasySketch/Sketch',["./EasySketch", "./EventManager", "./Util"], function (EasySketch, EventManager, Util) {

    /**
     *
     * @param {Object} element
     * @param {Object=null} options
     * @constructor
     */
    EasySketch.Sketch = function (element, options) {

        /**
         *
         * @type {{x: number, y: number}}
         * @protected
         */
        this.lastMouse = {x: 0, y: 0};

        /**
         *
         * @type {boolean}
         * @protected
         */
        this.disabled = false;

        /**
         *
         * @type {boolean}
         * @protected
         */
        this.binded = false;

        /**
         *
         * @type {boolean}
         * @protected
         */
        this.drawing = false;

        /**
         *
         * @type {EasySketch.EventManager}
         * @protected
         */
        this.events = new EventManager();

        /**
         *
         * @type {boolean}
         * @protected
         */
        this.eraser = false;

        /**
         *
         * @type {jQuery}
         * @protected
         */
        this.canvas = this._createCanvas(element);

        /**
         *
         * @type {CanvasRenderingContext2D}
         * @protected
         */
        this.context = this.canvas.get(0).getContext("2d");

        /**
         *
         * @type {jQuery}
         * @protected
         */
        this.overlay = null;

        /**
         *
         * @type {CanvasRenderingContext2D}
         * @protected
         */
        this.overlayContext = null;

        /**
         *
         * @type {Array}
         * @protected
         */
        this.points = [];

        /**
         *
         * @type {{color: string, width: number, alpha: number, bindingObject: jQuery, autoBind: boolean, doubleBuffering: boolean}}
         * @protected
         */
        this.options = {
            color: "#000000",
            width: 5,
            alpha: 1,
            bindingObject: null,
            autoBind: true,
            doubleBuffering: false
        };

        /**
         *
         * @type {{start: (function(this:EasySketch.Sketch)), draw: (function(this:EasySketch.Sketch)), stop: (function(this:EasySketch.Sketch))}}
         * @protected
         */
        this.listeners = {
            start: this.startDrawing.bind(this),
            draw: this.makeDrawing.bind(this),
            stop: this.stopDrawing.bind(this)
        };

        /**
         * Contains the list of addons attached to the sketcher
         *
         * @type {Array}
         * @protected
         */
        this.addons = [];

        // Setting the options
        if (options) {
            this.setOptions(options);
        }

        // Creating the overlay
        if (this.options.doubleBuffering === true) {
            this._createOverlay();
        }

        if (this.options.autoBind === true) {
            this.attachListeners();
        }

        this._attachStandardListeners();
    };

    // Triggered events
    EasySketch.Sketch.NOTIFY_START_EVENT = 'notify.start';
    EasySketch.Sketch.NOTIFY_PAINT_EVENT = 'notify.paint';
    EasySketch.Sketch.NOTIFY_STOP_EVENT = 'notify.stop';

    EasySketch.Sketch.prototype = {
        /**
         *
         * @returns {CanvasRenderingContext2D}
         * @protected
         */
        selectContext: function () {
            if (this.options.doubleBuffering === true && this.eraser === false) {
                return this.overlayContext;
            }

            return this.context;
        },

        /**
         *
         * @returns {jQuery}
         * @protected
         */
        selectCanvas: function () {
            if (this.options.doubleBuffering === true) {
                return this.overlay;
            }

            return this.canvas;
        },

        /**
         *
         * @param options
         * @returns {EasySketch.Sketch}
         */
        setOptions: function (options) {
            this.options = $.extend(this.options, options || {});

            return this;
        },

        /**
         *
         * @param {String} name
         * @param {String|Number|Object} value
         * @returns {EasySketch.Sketch}
         */
        setOption: function (name, value) {
            if (typeof name === "string" && this.options.hasOwnProperty(name)) {
                this.options[name] = value;
            }

            return this;
        },

        /**
         * Returns the value of an option if it exists and null (if this isn't changed) if it doesn't
         *
         * @param {String} name
         * @param {*=null} defaultValue
         * @returns {*}
         */
        getOption: function (name, defaultValue) {
            defaultValue = defaultValue || null;

            if (this.options.hasOwnProperty(name)) {
                return this.options[name];
            }

            return defaultValue;
        },

        /**
         * Returns the relevant options required to create a line
         *
         * @returns {{color: String, width: int, alpha: float}}
         */
        getDrawingOptions: function()
        {
            return {
                color: this.options.color,
                width: this.options.width,
                alpha: this.options.alpha
            };
        },

        /**
         *
         * @returns {EventManager|*}
         */
        getEventManager: function () {
            return this.events;
        },

        /**
         *
         * @param {Object} element
         * @returns {jQuery}
         * @private
         */
        _createCanvas: function (element) {
            var canvas;
            var elementType = typeof element;

            switch (elementType) {
                case "string":
                    if (element.indexOf('#') === 0) {
                        canvas = $(element);
                    } else if (element.indexOf('.') === -1) {
                        canvas = $("#" + element);
                    }
                    break;

                case "object":
                    if (element instanceof jQuery) {
                        canvas = element;
                    } else {
                        canvas = $(element);
                    }
                    break;
            }

            if (canvas.css("position").indexOf("absolute") === -1) {
                canvas.css("position", "absolute");
            }

            if (isNaN(parseInt(canvas.css("top")))) {
                canvas.css("top", 0);
            }

            if (isNaN(parseInt(canvas.css("left")))) {
                canvas.css("left", 0);
            }

            return canvas;
        },

        /**
         *
         * @returns {EasySketch.Sketch}
         * @private
         */
        _createOverlay: function () {
            // Making sure the overlay does not go out of the container
            this.canvas.parent().css("position", "relative");

            // Creating the overlay
            var overlay = $("<canvas></canvas>");
            overlay.addClass("drawing-overlay");
            overlay.attr("width", this.canvas.attr("width"));
            overlay.attr("height", this.canvas.attr("height"));
            overlay.css("position", "absolute");
            overlay.css("top", this.canvas.css("top"));
            overlay.css("left", this.canvas.css("top"));

            // Adding the overlay on top of our canvas
            this.canvas.after(overlay);

            // Replacing several object to make the overlay work
            this.options.bindingObject = overlay;
            this.overlayContext = overlay.get(0).getContext("2d");
            this.overlay = overlay;

            return this;
        },

        /**
         *
         * @returns {EasySketch.Sketch}
         * @private
         */
        _autoAdjustOverlay: function () {
            if (this.overlay !== null) {
                var scale = Util.getScale(this.canvas);

                this.overlay.attr("width", this.canvas.attr("width"));
                this.overlay.attr("height", this.canvas.attr("height"));
                this.overlay.css("position", "absolute");
                this.overlay.css("top", this.canvas.css("top"));
                this.overlay.css("left", this.canvas.css("top"));
                this.overlay.css(Util.getScalePropertyName(this.canvas), "scale(" + scale.x + ", " + scale.y + ")");
            }

            return this;
        },

        /**
         *
         * @returns {EasySketch.Sketch}
         * @private
         */
        _attachStandardListeners: function () {
            this.canvas.on("DOMAttrModified", this._autoAdjustOverlay.bind(this));

            return this;
        },

        /**
         *
         * @returns {EasySketch.Sketch}
         */
        attachListeners: function () {
            if (this.binded === true) {
                return this;
            }

            this.binded = true;

            // Selecting the object to bind on
            var bindingObject;
            if (this.getOption("bindingObject") !== null) {
                bindingObject = this.options["bindingObject"];
            } else {
                bindingObject = this.canvas;
            }

            // Canvas listeners
            bindingObject.on('mousedown touchstart', this.listeners.start);
            bindingObject.on('mousemove touchmove', this.listeners.draw);
            bindingObject.on('mouseup mouseleave mouseout touchend touchcancel', this.listeners.stop);

            return this;
        },

        /**
         * Listeners can also be detached if this is required
         *
         * @returns {EasySketch.Sketch}
         */
        detachListeners: function () {
            if (this.binded === false) {
                return this;
            }

            this.binded = false;

            // Selecting the object to bind on
            var bindingObject;
            if (this.getOption("bindingObject") !== null) {
                bindingObject = this.options["bindingObject"];
            } else {
                bindingObject = this.canvas;
            }

            // Canvas listeners
            bindingObject.off('mousedown touchstart', this.listeners.start);
            bindingObject.off('mousemove touchmove', this.listeners.draw);
            bindingObject.off('mouseup mouseleave mouseout touchend touchcancel', this.listeners.stop);

            return this;
        },

        /**
         *
         * @param {Event} e
         * @returns {{x: Number, y: Number}}
         */
        getPointerPosition: function (e) {
            var $this = this;
            var scale = Util.getScale(this.selectCanvas());

            if (e.hasOwnProperty("originalEvent") && e.originalEvent.hasOwnProperty("changedTouches") && e.originalEvent.changedTouches.length > 0) {
                e.pageX = e.originalEvent.changedTouches[0].pageX;
                e.pageY = e.originalEvent.changedTouches[0].pageY;
            }

            return {
                x: Math.ceil((e.pageX - $this.canvas.offset().left) / scale.x),
                y: Math.ceil((e.pageY - $this.canvas.offset().top) / scale.y)
            }
        },

        /**
         *
         * @param {Boolean} value
         * @returns {EasySketch.Sketch}
         */
        enableEraser: function (value) {
            this.eraser = value;

            return this;
        },

        /**
         *
         * @param {CanvasRenderingContext2D=CanvasRenderingContext2D} context
         * @returns {EasySketch.Sketch}
         * @protected
         */
        contextSetup: function (context) {
            context = context || this.selectContext();

            // Saving first to avoid changing other stuff
            context.save();

            // Applying our requirements
            context.strokeStyle = this.options.color;
            context.lineWidth = this.options.width;
            context.globalAlpha = this.options.alpha;
            context.lineCap = "round";
            context.lineJoin = "round";

            return this;
        },

        /**
         *
         * @param {CanvasRenderingContext2D=CanvasRenderingContext2D} context
         * @returns {EasySketch.Sketch}
         * @protected
         */
        contextRestore: function (context) {
            context = context || this.selectContext();
            context.restore();

            return this;
        },

        /**
         *
         * @param {Event} e
         * @returns {EasySketch.Sketch}
         * @protected
         */
        startDrawing: function (e) {
            if (this.drawing === true || this.disabled === true) {
                return this;
            }

            // To be able to handle touch events
            e.preventDefault();

            // Getting the pointer position if it was not provided
            var mouse = this.getPointerPosition(e);

            this.drawing = true;
            this.lastMouse = mouse;

            // Setting up the context with our requirements
            this.contextSetup();

            // Buffering the mouse position
            if (this.options.doubleBuffering === true && this.eraser === false) {
                this.points.push(mouse);
            }

            this.getEventManager().trigger(EasySketch.Sketch.NOTIFY_START_EVENT, this, [mouse]);

            return this;
        },

        /**
         *
         * @param {Event} e
         * @returns {EasySketch.Sketch}
         * @protected
         */
        makeDrawing: function (e) {
            if (this.drawing === false || this.disabled === true) {
                return this;
            }

            // To be able to handle touch events
            e.preventDefault();

            var mouse = this.getPointerPosition(e);

            this.drawPoints([this.lastMouse, mouse], this.selectContext());

            // The last position MUST be updated after drawing the line
            this.lastMouse = mouse;

            // Redrawing the line on the overlay
            if (this.options.doubleBuffering === true && this.eraser === false) {
                this.points.push(mouse);
                this.redrawBuffer();
            }

            this.getEventManager().trigger(EasySketch.Sketch.NOTIFY_PAINT_EVENT, this, [mouse]);

            return this;
        },

        /**
         *
         * @returns {EasySketch.Sketch}
         * @protected
         */
        stopDrawing: function () {
            if (this.drawing === false) {
                return this;
            }

            this.drawing = false;

            // Adding some CSS in the mix
            this.canvas.css('cursor', 'auto');

            // Restoring
            this.contextRestore();

            // Flushing the buffer
            if (this.options.doubleBuffering === true && this.eraser === false) {
                this.drawLine(this.points);
                this.points = [];
                this.clearOverlay();
            }

            // Triggering the stop event
            this.getEventManager().trigger(EasySketch.Sketch.NOTIFY_STOP_EVENT, this);

            return this;
        },

        /**
         *
         * @returns {EasySketch.Sketch}
         * @protected
         */
        redrawBuffer: function () {
            this.clearOverlay();
            this.drawPoints(this.points, this.overlayContext);

            return this;
        },

        /**
         *
         * @param {Array} points
         * @param {CanvasRenderingContext2D} context
         * @returns {EasySketch.Sketch}
         * @protected
         */
        drawPoints: function (points, context) {
            points = points.slice();
            var coordinates = points.shift();

            // Configuring the pen
            if (this.eraser) {
                // We do a save first to keep the previous globalCompositionOperation
                context.save();
                context.strokeStyle = "rgba(0,0,0,1)";
                context.globalAlpha = 1;
                context.globalCompositeOperation = "destination-out";
            }

            context.beginPath();
            context.moveTo(coordinates.x, coordinates.y);
            while (points.length > 0) {
                coordinates = points.shift();
                context.lineTo(coordinates.x, coordinates.y);
            }
            context.stroke();
            context.closePath();

            // Restoring the globalCompositeOperation
            if (this.eraser) {
                context.restore();
            }

            return this;
        },

        /**
         *
         * @param {Array} pointsArray
         * @returns {EasySketch.Sketch}
         */
        drawLine: function (pointsArray) {
            // Drawing a line MUST always be done on the master canvas
            var context = this.context;

            // Executing the drawing operations
            this.contextSetup(context);
            this.drawPoints(pointsArray, context);
            this.contextRestore(context);

            return this;
        },

        /**
         *
         * @returns {EasySketch.Sketch}
         */
        clear: function () {
            this.context.clearRect(0, 0, this.canvas[0].width, this.canvas[0].height);

            return this;
        },

        /**
         *
         * @returns {EasySketch.Sketch}
         */
        clearOverlay: function () {
            if (this.overlayContext instanceof CanvasRenderingContext2D) {
                this.overlayContext.clearRect(0, 0, this.overlay[0].width, this.overlay[0].height);
            }

            return this;
        },

        /**
         *
         * @param {EasySketch.Addon.AbstractAddon} addon
         * @returns {EasySketch.Sketch}
         */
        registerAddon: function (addon) {
            this.addons.push(addon);

            addon.attachSketchObject(this);

            return this;
        }
    };

    return EasySketch.Sketch;
});

/**
 * easy-sketch.js
 *
 * @link https://github.com/brian978/easy-sketch.js
 * @copyright Copyright (c) 2015
 * @license Creative Commons Attribution-ShareAlike 3.0
 */

define('EasySketch/Addon/Addon',["../EasySketch"], function (EasySketch) {
    
    /**
     * Namespace for the EasySketch addons
     * 
     * @returns {void}
     */
    EasySketch.Addon = function() {};

    return EasySketch.Addon;
});
/**
 * easy-sketch.js
 *
 * @link https://github.com/brian978/easy-sketch.js
 * @copyright Copyright (c) 2015
 * @license Creative Commons Attribution-ShareAlike 3.0
 */

define('EasySketch/Addon/AbstractAddon',["../EasySketch", "./Addon"], function (EasySketch, Addon) {
    /**
     * Interface for the addons
     *
     * @constructor
     * @interface
     */
    EasySketch.Addon.AbstractAddon = function () {
        /**
         * @type {EasySketch.Sketch}
         * @protected
         */
        this._object = null;
    };

    EasySketch.Addon.AbstractAddon.prototype = {
        /**
         *
         * @param {EasySketch.Sketch} object
         * @returns {EasySketch.Addon.AbstractAddon}
         */
        attachSketchObject: function (object) {
            this._object = object;

            return this;
        }
    };

    return EasySketch.Addon.AbstractAddon;
});

/**
 * easy-sketch.js
 *
 * @link https://github.com/brian978/easy-sketch.js
 * @copyright Copyright (c) 2015
 * @license Creative Commons Attribution-ShareAlike 3.0
 */

define('EasySketch/Addon/Redo',["./AbstractAddon", "../Util"], function (AbstractAddon, Util) {
    
    /**
     * Constructor for the undo addon
     *
     * @constructor
     * @extends {EasySketch.Addon.AbstractAddon}
     * @returns {void}
     */
    AbstractAddon.Redo = function() {
    };

    AbstractAddon.Redo.prototype = {
    };

    Util.extend(AbstractAddon, AbstractAddon.Redo);

    return AbstractAddon.Redo;
});

/**
 * easy-sketch.js
 *
 * @link https://github.com/brian978/easy-sketch.js
 * @copyright Copyright (c) 2015
 * @license Creative Commons Attribution-ShareAlike 3.0
 */

define('EasySketch/Addon/Undo',["../EasySketch", "./AbstractAddon", "../Util"], function (EasySketch, AbstractAddon, Util) {

    /**
     * Constructor for the undo addon
     *
     * @constructor
     * @extends {EasySketch.Addon.AbstractAddon}
     * @returns {void}
     */
    AbstractAddon.Undo = function () {
        /**
         * The lines the can be undone
         *
         * @type {Array}
         * @private
         */
        this._lines = [];

        /**
         * The current line is populated with the points that the user currently draws
         *
         * @type {Array}
         * @private
         */
        this._currentLine = [];
    };

    AbstractAddon.Undo.prototype = {
        /**
         *
         * @param {EasySketch.Sketch} object
         * @returns {EasySketch.Addon.AbstractAddon}
         */
        attachSketchObject: function (object) {
            AbstractAddon.prototype.attachSketchObject.call(this, object);

            object.getEventManager().attach(EasySketch.Sketch.NOTIFY_START_EVENT, this.onPaint.bind(this));
            object.getEventManager().attach(EasySketch.Sketch.NOTIFY_PAINT_EVENT, this.onPaint.bind(this));
            object.getEventManager().attach(EasySketch.Sketch.NOTIFY_STOP_EVENT, this.onStopPaint.bind(this));

            return this;
        },

        /**
         * Pushes the lines that are drawn to the array that identifies the current line
         *
         * @param {EasySketch.Event} event
         * @returns {AbstractAddon.Undo}
         */
        onPaint: function (event) {
            this._currentLine.push(event.getParam(0));

            return this;
        },

        /**
         * Transfers the current line to the lines array
         *
         * @returns {AbstractAddon.Undo}
         */
        onStopPaint: function () {
            this._lines.push({
                options: this._object.getDrawingOptions(),
                points: this._currentLine
            });

            this._currentLine = [];

            return this;
        },

        /**
         * Executes the undo functionality
         *
         * @returns {AbstractAddon.Undo}
         */
        execute: function()
        {
            this._object.clear();

            // Storing the drawing options so we can restore them after the redraw
            var options = this._object.getDrawingOptions();

            // Redrawing the lines
            for(var idx in this._lines) {
                if(this._lines.hasOwnProperty(idx)) {
                    if(idx == (this._lines.length - 1)) {
                        // Removing the last line so we can undo further
                        this._lines.pop();

                        break;
                    }

                    this._object.setOptions(this._lines[idx].options);
                    this._object.drawLine(this._lines[idx].points);
                }
            }

            // Restore
            this._object.setOptions(options);

            return this;
        },

        /**
         * Resets the _lines property so no lines can be undone
         *
         * @returns {AbstractAddon.Undo}
         */
        reset: function()
        {
            this._lines = [];

            return this;
        }
    };

    Util.extend(AbstractAddon, AbstractAddon.Undo);

    return AbstractAddon.Undo;
});

/**
 * easy-sketch.js
 *
 * @link https://github.com/brian978/easy-sketch.js
 * @copyright Copyright (c) 2014
 * @license Creative Commons Attribution-ShareAlike 3.0
 */

requirejs(["EasySketch/Sketch", "EasySketch/Addon/Redo", "EasySketch/Addon/Undo"], function(Sketch, RedoAddon, UndoAddon){
    var sketcher = new Sketch("#drawing-canvas", {doubleBuffering: true});

    // Initializing the addons
    var undo = new UndoAddon();

    sketcher.registerAddon(new RedoAddon());
    sketcher.registerAddon(undo);

    // Disables the eraser
    $('#pencil').on('click', function () {
        sketcher.enableEraser(false);
    });

    // Enables the eraser
    $('#eraser').on('click', function () {
        sketcher.enableEraser(true);
    });

    // Clear button
    $('#clear').on('click', function () {
        sketcher.clear();
        undo.reset();
    });

    // Undo button
    $("#undo").on('click', function(){
        undo.execute();
    });

    $('#line-width-control').on('change', function () {
        // Adjusting the line width of the drawing
        var lineWidth = $(this).val();
        sketcher.setOptions({width: lineWidth});

        // Informational purposes
        $('.line-width-controls').find('.info').html(lineWidth + "px");
    });

    $('#line-color-control').on('change', function () {
        // Adjusting the line width of the drawing
        var lineColor = $(this).val();
        sketcher.setOptions({color: lineColor});
    });

    $('#line-opacity-control').on('change', function () {
        // Adjusting the line width of the drawing
        var lineOpacity = $(this).val();
        sketcher.setOptions({alpha: lineOpacity});

        // Informational purposes
        $('.line-opacity-controls').find('.info').html((lineOpacity * 100) + "%");
    });

    // Getting the default color
    var defaultColor = sketcher.getOption('color');
    sketcher.context.font = "normal 20px Calibri";
    sketcher.context.fillText("Default brush color: " + defaultColor, 200, 50);

    // Predefined line
    sketcher.setOptions({alpha: 0.1});
    sketcher.drawLine([
        {
            x: 20,
            y: 10
        },
        {
            x: 40,
            y: 100
        },
        {
            x: 60,
            y: 10
        }
    ]);
    sketcher.drawLine([
        {
            x: 5,
            y: 10
        },
        {
            x: 15,
            y: 50
        },
        {
            x: 30,
            y: 10
        }
    ]);
    sketcher.setOptions({alpha: 1});

    // An event that is triggered when the user draws on the canvas
    // (this does not trigger when the DRAW_EVENT is called via the event manager)
    sketcher.getEventManager().attach(Sketch.NOTIFY_PAINT_EVENT, function (event) {
        console.log('drawing at ' + JSON.stringify(event.getParam(0)));
    });
});

define("Main/app", function(){});

